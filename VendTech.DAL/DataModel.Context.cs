//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VendTech.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VendtechEntities : DbContext
    {
        public VendtechEntities()
            : base("name=VendtechEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountVerificationOTP> AccountVerificationOTPs { get; set; }
        public virtual DbSet<Agency> Agencies { get; set; }
        public virtual DbSet<AppSetting> AppSettings { get; set; }
        public virtual DbSet<BankAccount> BankAccounts { get; set; }
        public virtual DbSet<ChequeBank> ChequeBanks { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<CMSPage> CMSPages { get; set; }
        public virtual DbSet<Commission> Commissions { get; set; }
        public virtual DbSet<ContactU> ContactUs { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<DepositLog> DepositLogs { get; set; }
        public virtual DbSet<DepositOTP> DepositOTPs { get; set; }
        public virtual DbSet<Deposit> Deposits { get; set; }
        public virtual DbSet<EmailConfirmationRequest> EmailConfirmationRequests { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<ForgotPasswordRequest> ForgotPasswordRequests { get; set; }
        public virtual DbSet<Meter> Meters { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<Nation> Nations { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<PendingDeposit> PendingDeposits { get; set; }
        public virtual DbSet<Platform> Platforms { get; set; }
        public virtual DbSet<PlatformApiConnection> PlatformApiConnections { get; set; }
        public virtual DbSet<PlatformApiLog> PlatformApiLogs { get; set; }
        public virtual DbSet<PlatformApi> PlatformApis { get; set; }
        public virtual DbSet<PlatformPacParam> PlatformPacParams { get; set; }
        public virtual DbSet<PlatformTransaction> PlatformTransactions { get; set; }
        public virtual DbSet<POS> POS { get; set; }
        public virtual DbSet<POSAssignedPlatform> POSAssignedPlatforms { get; set; }
        public virtual DbSet<ReferralCode> ReferralCodes { get; set; }
        public virtual DbSet<SMS_LOG> SMS_LOG { get; set; }
        public virtual DbSet<StanTable> StanTables { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TempCountry> TempCountries { get; set; }
        public virtual DbSet<TokensManager> TokensManagers { get; set; }
        public virtual DbSet<TransactionDetail> TransactionDetails { get; set; }
        public virtual DbSet<UserAssignedModule> UserAssignedModules { get; set; }
        public virtual DbSet<UserAssignedPlatform> UserAssignedPlatforms { get; set; }
        public virtual DbSet<UserAssignedWidget> UserAssignedWidgets { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserSchedule> UserSchedules { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<Widget> Widgets { get; set; }
        public virtual DbSet<RTS_DATA_VTWEB_TRANSACTIONDETALS__JULY_13___AUG_8___2024> RTS_DATA_VTWEB_TRANSACTIONDETALS__JULY_13___AUG_8___2024 { get; set; }
    
        public virtual ObjectResult<CalculateRunningBalance_Result> CalculateRunningBalance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CalculateRunningBalance_Result>("CalculateRunningBalance");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<CalculateRunningBalance1_Result> CalculateRunningBalance1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CalculateRunningBalance1_Result>("CalculateRunningBalance1");
        }
    
        public virtual ObjectResult<CalculateRunningBalance11_Result> CalculateRunningBalance11()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CalculateRunningBalance11_Result>("CalculateRunningBalance11");
        }
    }
}
